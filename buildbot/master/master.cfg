# -*- python -*-
# ex: set syntax=python:

import json

from buildbot.plugins import *
from buildbot.process.properties import Interpolate, WithProperties
from buildbot.status.builder import SUCCESS
from buildbot.status import html
from buildbot.status.web import authz, auth

creds = json.load(open("creds.json", "rb"))

unix_path_windows_images  = "/storage/volatility3/images/windows"
unix_path_windows_symbols = "/storage/volatility3/symbols/windows.zip"
unix_path_linux_images    = "/storage/volatility3/images/linux"
unix_path_linux_symbols   = "/storage/volatility3/symbols/linux.zip"
unix_path_mac_images      = "/storage/volatility3/images/mac"
unix_path_mac_symbols     = "/storage/volatility3/symbols/mac.zip"


build_path = "/storage/volatility3/build"
docs_path  = "/storage/volatility3/docs"

windows_path_network_mount   = "\\\\192.168.255.3\\storage"
windows_drive                = "s:"
windows_path_windows_images  = "s:\\volatility3\\images\\windows"
windows_path_windows_symbols = "s:\\volatility3\\symbols\\windows.zip"
windows_path_linux_images    = "s:\\volatility3\\images\\linux"
windows_path_linux_symbols   = "s:\\volatility3\\symbols\\linux.zip"
windows_path_mac_images      = "s:\\volatility3\\images\\mac"
windows_path_mac_symbols     = "s:\\volatility3\\symbols\\mac.zip"
windows_path_unzip           = "c:\\Program Files\\Git\\usr\\bin\\unzip.exe"
windows_path_pytest          = "c:\\Program Files\\Python37\\Scripts\\py.test.exe"
windows_path_pip             = "c:\\Program Files\\Python37\\Scripts\\pip.exe"
windows_path_pyinstaller     = "c:\\Program Files\\Python37\\Scripts\\pyinstaller.exe"
windows_path_virtualenv      = "c:\\Program Files\\Python39\\Scripts\\virtualenv.exe"

vol3_test_branches = ['stable', 'develop']

windows_tests = [
    "test_windows_pslist",
    "test_windows_psscan",
    "test_windows_dlllist",
    "test_windows_modules",
    "test_windows_hivelist",
    "test_windows_dumpfiles",
    "test_windows_handles",
    "test_windows_svcscan",
    "test_windows_privileges",
    "test_windows_getsids",
    "test_windows_envars",
    "test_windows_callbacks"
    ]

linux_tests = [
    "test_linux_pslist",
    "test_linux_check_idt",
    "test_linux_check_syscall",
    "test_linux_lsmod",
    "test_linux_lsof",
    "test_linux_proc_maps",
    "test_linux_tty_check"
    ]

mac_tests = [
    "test_mac_pslist",
    "test_mac_check_syscall",
    "test_mac_check_sysctl",
    "test_mac_check_trap_table",
    "test_mac_ifconfig",
    "test_mac_lsmod",
    "test_mac_lsof",
    "test_mac_malfind",
    "test_mac_mount",
    "test_mac_netstat",
    "test_mac_proc_maps",
    "test_mac_psaux",
    "test_mac_socket_filters",
    "test_mac_timers",
    "test_mac_trustedbsd"
    ]

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
    buildslave.BuildSlave("debian9", creds["slaves"]["debian9"]),
    buildslave.BuildSlave("win10-x64", creds["slaves"]["win10-x64"]),
    buildslave.BuildSlave("macos-10-14", creds["slaves"]["macos-10-14"])]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

def codebaseGenerator(chdict):
    all_repositories = {
        r'git@github.com:volatilityfoundation/volatility3.git': 'volatility3',
        r'git@buildbot-github:volatilityfoundation/buildbot.git': 'buildbot',
    }

    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git@github.com:volatilityfoundation/volatility3.git',
        workdir='gitpoller-workdir',
        branches=vol3_test_branches,
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

volatility3_codebases = {
    'volatility3': {
        'repository': 'git@github.com:volatilityfoundation/volatility3.git',
        'branch': 'develop',
        'revision': None
    },
    'buildbot': {
        'repository': 'git@buildbot-github:volatilityfoundation/buildbot.git',
        'branch': 'master',
        'revision': None
    },
}

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="vol3-master",
                            change_filter=util.ChangeFilter(branch=vol3_test_branches),
                            codebases = volatility3_codebases,
                            treeStableTimer=10,
                            builderNames=[
                                "vol3-deb9-py3.6",
                                "vol3-deb9-py3.7",
                                "vol3-deb9-py3.8",
                                "vol3-deb9-py3.9",
                                "vol3-macos-10-14-py3.7",
                                "vol3-win10-py3.7",
                                "vol3-win10-py3.8",
                                "vol3-win10-py3.9",
                                "vol3-mypy",
                                "vol3-docs",
                                "vol3-pyinstaller-win"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            codebases = volatility3_codebases,
                            builderNames=[
                                "vol3-deb9-py3.6",
                                "vol3-deb9-py3.7",
                                "vol3-deb9-py3.8",
                                "vol3-deb9-py3.9",
                                "vol3-macos-10-14-py3.7",
                                "vol3-win10-py3.7",
                                "vol3-win10-py3.8",
                                "vol3-win10-py3.9",
                                "vol3-mypy",
                                "vol3-docs",
                                "vol3-pyinstaller-win"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

#
# mypy
#

vol3_mypy_factory = util.BuildFactory()
vol3_mypy_factory.addStep(
    steps.Git(
        repourl='git@github.com:volatilityfoundation/volatility3.git',
        codebase='volatility3',
        mode='full',
        description="git clone vol3",
        descriptionDone="git clone vol3",
        workdir='volatility3'))

vol3_mypy_factory.addStep(
    steps.ShellCommand(
        workdir='volatility3',
        description="mypy vol.py",
        descriptionDone="mypy vol.py",
        decodeRC={1: SUCCESS},
        command=[
            "mypy",
            "vol.py",
            "--ignore-missing-imports"]))

#
# docs
#

vol3_docs_factory = util.BuildFactory()
vol3_docs_factory.addStep(
    steps.Git(
        repourl='git@github.com:volatilityfoundation/volatility3.git',
        codebase='volatility3',
        mode='full',
        description="git clone vol3",
        descriptionDone="git clone vol3",
        workdir='volatility3'))

vol3_docs_factory.addStep(
    steps.ShellCommand(
        workdir='volatility3/doc',
        description="build html docs",
        descriptionDone="build html docs",
        command=[
            "make",
            "html",
            "BUILDDIR=" + docs_path]))


#
# Linux/mac testing
#

def mk_vol3_unix_factory(python_version):

    symbols_path = 'volatility3/ve/lib/%s/site-packages/volatility3/symbols' % (python_version)

    vol3_unix_factory = util.BuildFactory()
    # check out the source
    vol3_unix_factory.addStep(
        steps.Git(
            repourl='git@github.com:volatilityfoundation/volatility3.git',
            codebase='volatility3',
            mode='full',
            description="git clone vol3",
            descriptionDone="git clone vol3",
            workdir='volatility3'))

    # Note: we use the following .ssh/config setup on the buildbot machine:
    # Host buildbot-github
    #    HostName github.com
    #    IdentityFile /var/lib/buildbot/.ssh/id_rsa_buildbot_repo
    #
    # This lets us use separate deploy keys for buildbot and vol3
    vol3_unix_factory.addStep(
        steps.Git(
            repourl='git@buildbot-github:volatilityfoundation/buildbot.git',
            codebase='buildbot',
            mode='full',
            description="git clone buildbot",
            descriptionDone="git clone buildbot",
            workdir='buildbot'))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="python version",
            descriptionDone="python version",
            command=[
                python_version,
                "--version"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="create virtualenv",
            descriptionDone="create virtualenv",
            command=[
                "virtualenv",
                "--python",
                python_version,
                "ve"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="pip install",
            descriptionDone="pip install",
            haltOnFailure=True,
            command=[
                "ve/bin/pip",
                "install",
                "setuptools",
                "wheel"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="pip freeze",
            descriptionDone="pip freeze",
            command=[
                "ve/bin/pip",
                "freeze"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="setup.py bdist_wheel",
            descriptionDone="setup.py bdist_wheel",
            haltOnFailure=True,
            command=[
                "ve/bin/python",
                "setup.py",
                "bdist_wheel"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="install vol3",
            descriptionDone="install vol3",
            haltOnFailure=True,
            # use a string so we can glob
            command="ve/bin/pip install dist/volatility3-*-py3-none-any.whl"))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="install deps",
            descriptionDone="install deps",
            haltOnFailure=True,
            command=[
                "ve/bin/pip",
                "install",
                "yara-python",
                "pycryptodome",
                "capstone"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="vol --help",
            descriptionDone="vol --help",
            haltOnFailure=True,
            command=[
                "ve/bin/vol",
                "--help"]))

    # run the first test before unzipping to test auto-download
    for test in windows_tests[0:1]:
        vol3_unix_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=python_version + ": " + test,
                descriptionDone=python_version + ": " + test,
                command=[
                    "py.test",
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    unix_path_windows_images,
                    "--volatility",
                    "../../volatility3/ve/bin/vol",
                    "--python",
                    "../../volatility3/ve/bin/python"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir=symbols_path,
            description="unzip windows.zip",
            descriptionDone="unzip windows.zip",
            command=[
                "unzip",
                "-o",
                unix_path_windows_symbols]))

    for test in windows_tests:
        vol3_unix_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=python_version + ": " + test,
                descriptionDone=python_version + ": " + test,
                command=[
                    "py.test",
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    unix_path_windows_images,
                    "--volatility",
                    "../../volatility3/ve/bin/vol",
                    "--python",
                    "../../volatility3/ve/bin/python"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir=symbols_path,
            description="unzip linux.zip",
            descriptionDone="unzip linux.zip",
            command=[
                "unzip",
                unix_path_linux_symbols]))

    for test in linux_tests:
        vol3_unix_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=python_version + ": " + test,
                descriptionDone=python_version + ": " + test,
                command=[
                    "py.test",
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    unix_path_linux_images,
                    "--volatility",
                    "../../volatility3/ve/bin/vol",
                    "--python",
                    "../../volatility3/ve/bin/python"]))

    vol3_unix_factory.addStep(
        steps.ShellCommand(
            workdir=symbols_path,
            description="unzip mac.zip",
            descriptionDone="unzip mac.zip",
            command=[
                "unzip",
                unix_path_mac_symbols]))

    for test in mac_tests:
        vol3_unix_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=python_version + ": " + test,
                descriptionDone=python_version + ": " + test,
                command=[
                    "py.test",
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    unix_path_mac_images,
                    "--volatility",
                    "../../volatility3/ve/bin/vol",
                    "--python",
                    "../../volatility3/ve/bin/python"]))

    return vol3_unix_factory


#
# Windows testing
#

def mk_vol3_windows_factory(python_version):

    windows_path_python = "c:\\Program Files\\%s\\python.exe" % (python_version)
    symbols_path = 'volatility3\\ve\\lib\\site-packages\\volatility3\\symbols'

    vol3_windows_factory = util.BuildFactory()
    # check out the source
    vol3_windows_factory.addStep(
        steps.Git(
            repourl='git@github.com:volatilityfoundation/volatility3.git',
            codebase='volatility3',
            mode='full',
            description="git clone vol3",
            descriptionDone="git clone vol3",
            workdir='volatility3'))

    # Note: we use the following .ssh/config setup on the buildbot machine:
    # Host buildbot-github
    #    HostName github.com
    #    IdentityFile /var/lib/buildbot/.ssh/id_rsa_buildbot_repo
    #
    # This lets us use separate deploy keys for buildbot and vol3
    vol3_windows_factory.addStep(
        steps.Git(
            repourl='git@buildbot-github:volatilityfoundation/buildbot.git',
            codebase='buildbot',
            mode='full',
            description="git clone buildbot",
            descriptionDone="git clone buildbot",
            workdir='buildbot'))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="python version",
            descriptionDone="python version",
            command=[
                windows_path_python,
                "--version"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="create virtualenv",
            descriptionDone="create virtualenv",
            command=[
                windows_path_virtualenv,
                "--python",
                windows_path_python,
                "ve"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="pip install",
            descriptionDone="pip install",
            haltOnFailure=True,
            command=[
                "ve\\Scripts\\pip.exe",
                "install",
                "setuptools",
                "wheel"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="pip freeze",
            descriptionDone="pip freeze",
            command=[
                "ve\\Scripts\\pip.exe",
                "freeze"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="setup.py bdist_wheel",
            descriptionDone="setup.py bdist_wheel",
            haltOnFailure=True,
            command=[
                "ve\\Scripts\\python.exe",
                "setup.py",
                "bdist_wheel"]))

    vol3_windows_factory.addStep(
        steps.SetPropertyFromCommand(
            workdir='volatility3',
            description="find wheel",
            descriptionDone="find wheel",
            command="dir /B dist\\volatility3-*",
            property="wheel"))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="install vol3",
            descriptionDone="install vol3",
            haltOnFailure=True,
            command=[
                "ve\\Scripts\\pip.exe",
                "install",
                WithProperties("dist\\%s", "wheel")]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="install deps",
            descriptionDone="install deps",
            haltOnFailure=True,
            command=[
                "ve\\Scripts\\pip.exe",
                "install",
                "yara-python",
                "pycryptodome",
                "capstone",
                "capstone-windows"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3',
            description="vol3.py --help",
            descriptionDone="vol3.py --help",
            command=[
                "ve\\Scripts\\vol.exe",
                "--help"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir='volatility3/volatility',
            description="mount share",
            descriptionDone="mount share",
            warnOnFailure=False,
            flunkOnFailure=False,
            command=[
                "net",
                "use",
                windows_drive,
                windows_path_network_mount]))

    # run the first test before unzipping to test auto-download
    for test in windows_tests[0:1]:
        vol3_windows_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=test,
                descriptionDone=test,
                command=[
                    windows_path_pytest,
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    windows_path_windows_images,
                    "--volatility",
                    "..\\..\\volatility3\\ve\\Scripts\\vol.exe",
                    "--python",
                    "..\\..\\volatility3\\ve\\Scripts\\python.exe"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir=symbols_path,
            description="unzip windows.zip",
            descriptionDone="unzip windows.zip",
            command=[
                windows_path_unzip,
                "-o",
                windows_path_windows_symbols]))

    for test in windows_tests:
        vol3_windows_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=test,
                descriptionDone=test,
                command=[
                    windows_path_pytest,
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    windows_path_windows_images,
                    "--volatility",
                    "..\\..\\volatility3\\ve\\Scripts\\vol.exe",
                    "--python",
                    "..\\..\\volatility3\\ve\\Scripts\\python.exe"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir=symbols_path,
            description="unzip linux.zip",
            descriptionDone="unzip linux.zip",
            command=[
                windows_path_unzip,
                windows_path_linux_symbols]))

    for test in linux_tests:
        vol3_windows_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=test,
                descriptionDone=test,
                command=[
                    windows_path_pytest,
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    windows_path_linux_images,
                    "--volatility",
                    "..\\..\\volatility3\\ve\\Scripts\\vol.exe",
                    "--python",
                    "..\\..\\volatility3\\ve\\Scripts\\python.exe"]))

    vol3_windows_factory.addStep(
        steps.ShellCommand(
            workdir=symbols_path,
            description="unzip mac.zip",
            descriptionDone="unzip mac.zip",
            command=[
                windows_path_unzip,
                windows_path_mac_symbols]))

    for test in mac_tests:
        vol3_windows_factory.addStep(
            steps.ShellCommand(
                workdir='buildbot/pytest',
                description=test,
                descriptionDone=test,
                command=[
                    windows_path_pytest,
                    "test_volatility.py",
                    "-k",
                    test,
                    "-v",
                    "--durations=0",
                    "--image-dir",
                    windows_path_mac_images,
                    "--volatility",
                    "..\\..\\volatility3\\ve\\Scripts\\vol.exe",
                    "--python",
                    "..\\..\\volatility3\\ve\\Scripts\\python.exe"]))

    return vol3_windows_factory

#
# Windows Pyinstaller
#

vol3_pyinstaller_windows_factory = util.BuildFactory()
# check out the source
vol3_pyinstaller_windows_factory.addStep(
    steps.Git(
        repourl='git@github.com:volatilityfoundation/volatility3.git',
        codebase='volatility3',
        mode='full',
        description="git clone vol3",
        descriptionDone="git clone vol3",
        workdir='volatility3'))

vol3_pyinstaller_windows_factory.addStep(
    steps.ShellCommand(
        description="pip freeze",
        descriptionDone="pip freeze",
        command=[
            windows_path_pip,
            "freeze"]))

vol3_pyinstaller_windows_factory.addStep(
    steps.ShellCommand(
        workdir='volatility3',
        description="pyinstaller vol.spec",
        descriptionDone="pyinstaller vols.spec",
        haltOnFailure=True,
        command=[
            windows_path_pyinstaller,
            "vol.spec"]))

vol3_pyinstaller_windows_factory.addStep(
    steps.ShellCommand(
        workdir='volatility3',
        description="pyinstaller volshell.spec",
        descriptionDone="pyinstaller volshell.spec",
        haltOnFailure=True,
        command=[
            windows_path_pyinstaller,
            "volshell.spec"]))

vol3_pyinstaller_windows_factory.addStep(
    steps.FileUpload(
        description="download vol.exe",
        descriptionDone="download vol.exe",
        workdir='volatility3/dist',
        slavesrc="vol.exe",
        mode=0644,
        masterdest=Interpolate(
            build_path + '/%(prop:buildername)s/%(prop:buildnumber)s/vol.exe')))

vol3_pyinstaller_windows_factory.addStep(
    steps.FileUpload(
        description="download volshell.exe",
        descriptionDone="download volshell.exe",
        workdir='volatility3/dist',
        slavesrc="volshell.exe",
        mode=0644,
        masterdest=Interpolate(
            build_path + '/%(prop:buildername)s/%(prop:buildnumber)s/volshell.exe')))

vol3_pyinstaller_windows_factory.addStep(
    steps.MasterShellCommand(
        description="chmod build dir",
        descriptionDone="chmod build dir",
        command=[
            "chmod",
            "go+rx",
            Interpolate(
                build_path + '/%(prop:buildername)s/%(prop:buildnumber)s')]))

#
# BUILDERS
#

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="vol3-deb9-py3.6",
      slavenames=["debian9"],
      factory=mk_vol3_unix_factory("python3.6")))
c['builders'].append(
    util.BuilderConfig(name="vol3-deb9-py3.7",
      slavenames=["debian9"],
      factory=mk_vol3_unix_factory("python3.7")))
c['builders'].append(
    util.BuilderConfig(name="vol3-deb9-py3.8",
      slavenames=["debian9"],
      factory=mk_vol3_unix_factory("python3.8")))
c['builders'].append(
    util.BuilderConfig(name="vol3-deb9-py3.9",
      slavenames=["debian9"],
      factory=mk_vol3_unix_factory("python3.9")))
c['builders'].append(
    util.BuilderConfig(name="vol3-macos-10-14-py3.7",
      slavenames=["macos-10-14"],
      factory=mk_vol3_unix_factory("python3.7")))
c['builders'].append(
    util.BuilderConfig(name="vol3-win10-py3.7",
      slavenames=["win10-x64"],
      factory=mk_vol3_windows_factory("Python37")))
c['builders'].append(
    util.BuilderConfig(name="vol3-win10-py3.8",
      slavenames=["win10-x64"],
      factory=mk_vol3_windows_factory("Python38")))
c['builders'].append(
    util.BuilderConfig(name="vol3-win10-py3.9",
      slavenames=["win10-x64"],
      factory=mk_vol3_windows_factory("Python39")))
c['builders'].append(
    util.BuilderConfig(name="vol3-pyinstaller-win",
      slavenames=["win10-x64"],
      factory=vol3_pyinstaller_windows_factory))
c['builders'].append(
    util.BuilderConfig(name="vol3-mypy",
      slavenames=["debian9"],
      factory=vol3_mypy_factory))
c['builders'].append(
    util.BuilderConfig(name="vol3-docs",
      slavenames=["debian9"],
      factory=vol3_docs_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([[s.encode('utf-8') for s in creds["webauth"]]]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Volatility"
c['titleURL'] = "https://www.volatilityfoundation.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.volatilityfoundation.org"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
